(cl:in-package :cl-metaheuristics-examples)

(deftype hypergraph nil '(simple-array bit (* *)))
(deftype coloring nil '(simple-array (integer -1 1) (*)))

(defun make-zerograph (n m)
  (make-array (list n m) :element-type 'bit :initial-element 0))

(defun make-randomgraph (n m)
  (let ((graph (make-array (list n m) :element-type 'bit)))
    (iter (for i below (array-total-size graph))
          (setf (row-major-aref graph i) (random 2)))
    graph))

(defun print-incidence (graph &optional (out *standard-output*))
  (destructuring-bind (n m) (array-dimensions graph)
    (dotimes (i n)
      (dotimes (j m)
        (princ (aref graph i j) out))
      (terpri out))))

(defun make-rothgraph (n)
  "Returns the hypergraph ROTH(n)"
  (let* ((m (+ n
               (iter (for delta from 1 below n)
                     (sum (iter (for base from 0 below (- n delta))
                                (sum (floor (- n base 1) delta)))))))
         (graph (make-array (list n m) :element-type 'bit))
         (col 0))
    (iter (for delta from 1 below n)
          (iter (for base from 0 below (- n delta))
                (iter (for len from 2 to (1+ (floor (- n base 1) delta)))
                      (iter (for row from base below n by delta)
                            (repeat len)
                            (setf (aref graph row col) 1))
                      (incf col))))
    (dotimes (base n)
      (setf (aref graph base col) 1)
      (incf col))
    graph))

(defmacro dotimes-unroll ((i n unroll-size) &body body)
  (check-type i symbol)
  (assert (and (constantp unroll-size)
               (typep unroll-size 'positive-fixnum)))
  (alexandria:once-only (n)
    `(locally
         (declare (nonnegative-fixnum ,n))
       (do ((,i 0))
           ((< ,n (the nonnegative-fixnum (+ ,unroll-size ,i)))
            (do ((,i ,i (the nonnegative-fixnum (1+ ,i))))
                ((< ,n (the nonnegative-fixnum (1+ ,i))))
              ,@body))
         (declare (nonnegative-fixnum ,i))
         ,@(loop repeat unroll-size
                 append (append body `((incf ,i))))))))

(defun calc-discrepancy (graph coloring)
  (declare (optimize (speed 3) (safety 0))
           (coloring coloring)
           (hypergraph graph))
  (destructuring-bind (n m) (array-dimensions graph)
    (declare (nonnegative-fixnum n m))
    (let ((max-disc 0))
      (declare (nonnegative-fixnum max-disc))
      (dotimes (j m)
        (let ((local-signed-disc 0))
          (declare (fixnum local-signed-disc))
          (dotimes-unroll (i n 8)
            (incf local-signed-disc (* (aref coloring i)
                                       (aref graph i j))))
          (setf max-disc (max max-disc (abs local-signed-disc)))))
      max-disc)))
;; (defun calc-discrepancy (graph coloring)
;;   (declare (optimize (speed 3) (safety 0))
;;            (coloring coloring)
;;            (hypergraph graph))
;;   (destructuring-bind (n m) (array-dimensions graph)
;;     (declare (nonnegative-fixnum n m))
;;     (iter (declare (declare-variables))
;;           (for j below m)
;;           (declare (fixnum j))
;;           (maximize
;;            (the nonnegative-fixnum
;;                 (abs (iter (for i below n)
;;                            (declare (fixnum i))
;;                            (sum (* (aref coloring i)
;;                                    (aref graph i j))
;;                                 into res)
;;                            (declare (fixnum res))
;;                            (finally (return res)))))))))
